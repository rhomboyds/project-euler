'''
Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms.
'''

def even_fib_total(max):
    '''
    (int) -> int

    Retun the sum of the even-valued terms in the fibonacci sequence that
    are less than max.

    >>> even_fib_total(13)
    10

    '''
    #intial values
    term_1 = 1
    term_2 = 2
    total = 0

    while term_2 < max:
        term_3 = term_1 + term_2    #find next term in fibonacci sequence
        if (term_3 % 2 == 0):       #check if this value is even
            total += term_3
        term_1 = term_2         #shift scope of fibonacci sequence forward
        term_2 = term_3

    return total + 2    #add 2 to final total to account for initial term_2

        
print(even_fib_total(4000000))
